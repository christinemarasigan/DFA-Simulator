'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('babel-runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('babel-runtime/helpers/objectWithoutProperties'));
var _Object$getPrototypeOf = _interopDefault(require('babel-runtime/core-js/object/get-prototype-of'));
var _classCallCheck = _interopDefault(require('babel-runtime/helpers/classCallCheck'));
var _createClass = _interopDefault(require('babel-runtime/helpers/createClass'));
var _possibleConstructorReturn = _interopDefault(require('babel-runtime/helpers/possibleConstructorReturn'));
var _inherits = _interopDefault(require('babel-runtime/helpers/inherits'));
var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));

// http://thenewcode.com/1068/Making-Arrows-in-SVG

var PolyLineStyle = {
  fill: 'none'
  // Not yet sure if this is a good property to set or not
  //vectorEffect: 'non-scaling-stroke'
};

var PathStyle = {
  fill: 'none'
};

function toRad(d) {
  return d * Math.PI / 180;
}

var Arrow = function (_PureComponent) {
  _inherits(Arrow, _PureComponent);

  function Arrow() {
    _classCallCheck(this, Arrow);

    var _this = _possibleConstructorReturn(this, (Arrow.__proto__ || _Object$getPrototypeOf(Arrow)).call(this));

    if (!_this.constructor.__counter) {
      _this.constructor.__counter = 1;
    }
    _this.uniqid = _this.constructor.__counter++;
    return _this;
  }

  _createClass(Arrow, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          length = _props.length,
          angle = _props.angle,
          arrowHeadFilled = _props.arrowHeadFilled,
          lineWidth = _props.lineWidth,
          lineDashed = _props.lineDashed,
          otherProps = _objectWithoutProperties(_props, ['length', 'angle', 'arrowHeadFilled', 'lineWidth', 'lineDashed']);

      // By default, our sin math would let the angle rotate to
      // the left. Reverse the direction.


      angle = -angle + 180;
      angle = angle % 360;

      // Let's do some trig to calculate the viewbox.
      //
      // Assuming the arrow points top right, c is the arrow
      // length, a is the viewbox width, b is the viewbox height.

      // We know C is 90deg
      var B = angle;
      var C = 90;
      var A = 180 - C - B;
      var c = length;

      // Get all the sides
      var a = c / Math.sin(toRad(C)) * Math.sin(toRad(A));
      var b = c / Math.sin(toRad(C)) * Math.sin(toRad(B));

      // a, b can be negative if the angle. We will rewrite
      // those values to go inside the svg viewbox.
      var width = Math.abs(b);
      var height = Math.abs(a);

      var padding = 10;

      // Now we have a viewBox
      var viewBox = '0 0 ' + (width + padding * 2) + ' ' + (height + padding * 2);

      function point(x, y) {
        if (b < 0) {
          x = width + padding * 2 - x;
        }
        if (a < 0) {
          y = height + padding * 2 - y;
        }
        return x + ',' + y;
      }

      var path = ['M' + point(padding, padding), 'L' + point(width + padding, height + padding)];

      // TODO: Cooler line:
      // M16.7,178 c87.6-46.9,162.9-185.4,227-136.4C307.2,90.1,195,158.5,111,108.9C71,85.2,92.2,30.7,126,7

      var markerId = 'Arrow-pointer-' + this.uniqid;

      // Based on the props, determine the styles.
      var arrowHeadStyle = _extends({}, PolyLineStyle, {
        strokeWidth: 0,
        stroke: this.props.color
      });
      if (this.props.arrowHeadFilled) {
        arrowHeadStyle.fill = this.props.color;
      } else {
        arrowHeadStyle.strokeWidth = 1;
      }

      var lineStyle = _extends({}, PathStyle, {
        stroke: this.props.color,
        strokeWidth: this.props.lineWidth
      });

      if (lineDashed) {
        if (typeof lineDashed !== 'string') {
          lineDashed = '11, 5';
        }

        lineStyle.strokeDasharray = lineDashed;
      }

      return React__default.createElement(
        'svg',
        _extends({ xmlns: 'http://www.w3.org/2000/svg', viewBox: viewBox }, otherProps),
        React__default.createElement(
          'defs',
          null,
          React__default.createElement(
            'marker',
            {
              id: markerId,
              markerWidth: '9',
              markerHeight: '9',
              refX: '8',
              refY: '5',
              orient: 'auto',
              markerUnits: 'strokeWidth'
            },
            React__default.createElement('polyline', { points: '1 1, 9 5, 1 9', style: arrowHeadStyle })
          )
        ),
        React__default.createElement('path', {
          style: lineStyle,
          d: path.join(' '),
          markerEnd: 'url(#' + markerId + ')'
        })
      );
    }
  }]);

  return Arrow;
}(React.PureComponent);

Arrow.propTypes = {
  length: PropTypes.number,
  angle: PropTypes.number,
  color: PropTypes.string,
  arrowHeadFilled: PropTypes.bool,
  lineWidth: PropTypes.number,
  lineDashed: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])
};
Arrow.defaultProps = {
  angle: 0,
  length: 50,
  color: '#231F20',
  arrowHeadFilled: true,
  lineWidth: 1,
  lineDashed: false
};

module.exports = Arrow;
//# sourceMappingURL=index.js.map
